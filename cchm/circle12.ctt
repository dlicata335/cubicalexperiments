module circle12 where

import prelude
import s1
-- import spheres
import susp
import equiv

S1_1_to_2 : S1 -> Susp Bool = split
  base -> joinl true
  loop @ x ->
    comp
      (<_> Susp Bool)
      (merid Bool true @ x)
      [(x=0) -> <_> joinl true,
       (x=1) -> <x> merid Bool false @ -x]

S1_2_to_1_b : Bool -> Path S1 base base = split
  true -> <x> loop{S1} @ x
  false -> <_> base


S1_2_to_1 : Susp Bool -> S1 = split
  joinl a -> base
  joinr a -> base
  join a b @ x -> S1_2_to_1_b b @ x

{-
-- The following doesn't yet typecheck. Very gnarly anyway.
S1_1_to_2_c1 : (x : S1) -> Path S1 (S1_2_to_1 (S1_1_to_2 x)) x =
  split
    base -> <_> base
    loop @ i -> ?
      where
        aux2
         : Path
            S1
            (comp (<_> S1)
              (comp (<_> S1)
                (loop {S1} @ i)
                [(i = 0) -> <_> base,
                 (i = 1) -> <j> loop {S1} @ -j ])
              [(i = 0) -> <_> base,
               (i = 1) -> <j>
                 comp (<_> S1) base
                   [(j = 0) -> <_> base,
                    (j = 1) -> <_> base]])
             (comp (<_> S1)
                (loop {S1} @ i)
                [(i = 0) -> <_> base,
                 (i = 1) -> <j> loop {S1} @ -j ])
          = <k> fill
              (<_> S1)
              (comp
                (<_> S1)
                (loop {S1} @ i)
                [(i = 0) -> <_> base,
                 (i = 1) -> <j> loop {S1} @ -j ])
              [(i = 0) -> <_> base,
               (i = 1) -> <j>
                 comp (<_> S1) base
                   [(j = 0) -> <_> base,
                    (j = 1) -> <_> base]]
             @ -k

        aux3
          : Path
             S1
             (comp (<_> S1)
                (loop {S1} @ i)
                [(i = 0) -> <_> base,
                 (i = 1) -> <j> loop {S1} @ -j ])
             (loop {S1} @ i)
          = <k> fill (<_> S1) (loop {S1} @ i) [(i = 0) -> <_> base, (i = 1) -> <j> loop {S1} @ -j] @ -k


        aux
         : Path
            S1
            (comp (<_> S1)
              (comp (<_> S1)
                (loop {S1} @ i)
                [(i = 0) -> <_> base,
                 (i = 1) -> <j> loop {S1} @ -j ])
              [(i = 0) -> <_> base,
               (i = 1) -> <j>
                 comp (<_> S1) base
                   [(j = 0) -> <_> base,
                    (j = 1) -> <_> base]])
            (loop {S1} @ i)
            = <j>
                comp (<_> S1) (aux2 @ j)
                [(j=0) -> <_>
                   (comp (<_> S1)
                      (comp (<_> S1)
                        (loop {S1} @ i)
                        [(i = 0) -> <_> base,
                         (i = 1) -> <j> loop {S1} @ -j ])
                      [(i = 0) -> <_> base,
                       (i = 1) -> <j>
                         comp (<_> S1) base
                           [(j = 0) -> <_> base,
                            (j = 1) -> <_> base]]),
                  (j=1) -> aux3]

{-

S1_1_to_2_c2_merid
  : (b : Bool)
  -> PathP
       (<x> Path (Susp Bool) (S1_1_to_2 (S1_2_to_1_b b @ x)) (merid{Susp Bool} b @ x))
       (<_> north)
       (<x> merid{Susp Bool} false @ x)
  =
  split
    true -> <x> <y> fill (<_> Susp Bool) (merid{Susp Bool} true @ x) [(x=0) -> <_> north, (x=1) -> <z> merid {Susp Bool} false @ -z] @ -y
    false -> <x> <y> merid{Susp Bool} false @ (x/\y)



S1_1_to_2_c2 : (x : Susp Bool) -> Path (Susp Bool) (S1_1_to_2 (S1_2_to_1 x)) x =
  split
    north -> <_> north
    south -> <x> merid{Susp Bool} false @ x
    merid b @ x -> S1_1_to_2_c2_merid b @ x

S1_1_is_S1_2 : Path U S1 (Susp Bool) =
  isoPath S1 (Susp Bool) S1_1_to_2 S1_2_to_1 S1_1_to_2_c2 S1_1_to_2_c1
-}
