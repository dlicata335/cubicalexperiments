module hopf where

import prelude
import susp
import s1
import join
import pointedtypes
import helix

hopf : S2 -> U = split
  joinl a -> S1
  joinr a -> S1
  join a b @ x -> aux a @ x
    where
      aux : Bool -> Path U S1 S1 = split
        true -> <y> rotpath b @ y
        false -> <_> S1

hopfToJoinAuxL : Bool -> S1 -> Join S1 S1 = split
  true -> \(a : S1) -> joinl a
  false -> \(a : S1) -> joinr a


hopfToJoin : (a : S2) -> hopf a -> Join S1 S1 = split
  joinl a -> hopfToJoinAuxL a
  joinr a -> \(a : S1) -> joinr a
  join a b @ x -> aux a b @ x
    where
      aux : (a : Bool) -> (b : S1) -> PathP (<y> hopf (join{S2} a b @ y) -> Join S1 S1) (hopfToJoinAuxL a) (\(a : S1) -> joinr a) = split
        true ->
          \(a : S1) -> <x> \(p : rotpath a @ x) ->
            comp
              (<_> Join S1 S1)
              (join{Join S1 S1}
                 (comp (<z> rotpath a @ -z /\ x) p [])
                 (comp (<z> rotpath a @ z \/ x) p [])
                 @ x)
              [(x=0) -> <z> joinl (fill (<_> S1) p [] @ -z),
               (x=1) -> <z> joinr (fill (<_> S1) p [] @ -z)]

        false -> \(_ : S1) -> <_> \(a : S1) -> joinr a



totalHopfToJoin (e : (a : S2) * hopf a) : Join S1 S1 =
  hopfToJoin e.1 e.2

S3 : U = Susp S2
ptS3 : PointedType = (S3, joinl true)
ptS2 : PointedType = (S2, joinl true)
ptS1 : PointedType = (S1, base)


hopfOne : (itOmega one ptS2).1 -> U = itFibOmega one ptS2 hopf base

hopfTwo : (itOmega two ptS2).1 -> U = itFibOmega two ptS2 hopf base

hopfThree : (itOmega three ptS2).1 -> U = itFibOmega three ptS2 hopf base

ptJoin (pA:PointedType) (B:U) : PointedType = (Join pA.1 B, joinl (pt pA))


lemPropFibS1 (P : S1 -> U) (pP : (x:S1) -> HProp (P x)) (bP: P base) : (x:S1) -> P x = split
 base -> bP
 loop @ i -> lemPropF S1 P pP base base loopS1 bP bP @ i


fibContrHopfThree (p : (itOmega three ptS2).1) : hopfThree p =
  truncFibOmega
    (itOmega two ptS2)
    hopfTwo
    (<_> <_> base)
    zero
    (truncFibOmega
      (Omega ptS2)
      hopfOne
      (<_> base)
      one
      (truncFibOmega ptS2 hopf base two isOneTypeS1 (<_> joinl true))
      (<_> pt (Omega ptS2)))
    p
  where
    isOneTypeS1 : OneType S1 =
      lemPropFibS1
        (\(x:S1) -> (y:S1) -> HSet (Path S1 x y))
        (\(x:S1) ->
          Pi_level_prop
            S1
            (\(y:S1) -> HSet (Path S1 x y))
            (\(y:S1) -> setIsProp (Path S1 x y)))
        (lemPropFibS1
          (\ (y:S1) -> HSet (Path S1 base y))
          (\ (y:S1) -> setIsProp (Path S1 base y))
          setLoop)



-- The map h from 9.3
hopfLoop (p : (itOmega three ptS2).1) : (itOmega three (ptJoin ptS1 S1)).1 =
  itMapOmegaRefl
    three
    ((a : S2) * hopf a, (joinl true, base))
    (Join S1 S1)
    totalHopfToJoin
    (itTotalFibOmega three ptS2 hopf base (p, fibContrHopfThree p))


e2' (p : (itOmega two ptS2).1) : OmegaS1
 = comp (<i> fibOmega ptS2 hopf base (p @ i)) (<_> base) []

