module join where

import prelude
import pointedtypes

data Join (A : U) (B : U) = joinl (a : A)
                          | joinr (b : B)
                          | join (a:A) (b : B) <i> [(i=0) -> joinl a, (i=1) -> joinr b]

-- pointed by inl a0
JoinP (A : PointedType) (B : PointedType) : PointedType = (Join A.1 B.1, joinl A.2)

-- join Bool A is a "fat" suspension, with an inm construct including A, and paths from N to inm(x) to S
-- inl true = N
-- inl false = S
-- inr x = inm x
FSusp (A : U) : U = Join Bool A

