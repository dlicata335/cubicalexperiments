module nat where

import prelude
import hedberg


pred : Nat -> Nat = split
  zero -> zero
  suc n -> n

add (m : Nat) : Nat -> Nat = split
  zero  -> m
  suc n -> suc (add m n)

add_zero : (n : Nat) -> Path Nat (add zero n) n = split
  zero  -> <i> zero
  suc n -> <i> suc (add_zero n @ i)

add_suc (a:Nat) : (n : Nat) -> Path Nat (add (suc a) n) (suc (add a n)) = split
  zero  ->  <i> suc a
  suc m -> <i> suc (add_suc a m @ i)

add_comm (a : Nat) : (n : Nat) -> Path Nat (add a n) (add n a) = split
  zero  -> <i> add_zero a @ -i
  suc m -> <i> comp (<_> Nat) (suc (add_comm a m @ i))
                    [ (i = 0) -> <j> suc (add a m)
                    , (i = 1) -> <j> add_suc m a @ -j ]

assocAdd (a b:Nat) : (c:Nat) -> Path Nat (add a (add b c)) (add (add a b) c) = split
 zero -> <i>add a b
 suc c1 -> <i>suc (assocAdd a b c1@i)

add' : Nat -> Nat -> Nat = split
  zero -> \(x : Nat) -> x
  suc n -> \(x : Nat) -> suc (add' n x)

sucInj (n m : Nat) (p : Path Nat (suc n) (suc m)) : Path Nat n m =
 <i> pred (p @ i)

add_comm3 (a b c : Nat) : Path Nat (add a (add b c)) (add c (add b a)) =
  let rem : Path Nat (add a (add b c)) (add a (add c b)) = <i> add a (add_comm b c @ i)
      rem1 : Path Nat (add a (add c b)) (add (add c b) a) = add_comm a (add c b)
      rem2 : Path Nat (add (add c b) a) (add c (add b a)) = <i> assocAdd c b a @ -i
  in <i> comp (<_> Nat) (rem1 @ i) [ (i = 0) -> <j> rem @ -j, (i = 1) -> rem2 ]

Natcancelr (a b : Nat) : (x : Nat) -> Path Nat (add a x) (add b x) -> Path Nat a b = split
  zero -> \(h : Path Nat a b) -> h
  suc x' -> \(h : Path Nat (suc (add a x')) (suc (add b x'))) ->
    Natcancelr a b x' (sucInj (add a x') (add b x') h)

idNat : Nat -> Nat = split
  zero -> zero
  suc n -> suc (idNat n)

-- test : Path (Nat -> Nat) idNat (idfun Nat) = funExt Nat (\(_ : Nat) -> Nat) idNat (idfun Nat) rem
--   where
--   rem : (n : Nat) -> Path Nat (idNat n) n = split
--     zero -> refl Nat zero
--     suc n -> mapOnPath Nat Nat (\(x : Nat) -> suc x) (idNat n) n (rem n)

caseNat (A : U) (a0 aS : A) : Nat -> A = split
 zero -> a0
 suc n -> aS

caseDNat (P:Nat -> U) (a0 :P zero) (aS : (n:Nat) -> P (suc n))
            : (n:Nat) -> P n = split
 zero -> a0
 suc n -> aS n

znots (n : Nat) : not (Path Nat zero (suc n)) =
 \ (h:Path Nat zero (suc n)) -> subst Nat (caseNat U Nat Void) zero (suc n) h zero

snotz (n : Nat) : not (Path Nat (suc n) zero) =
 \ (h:Path Nat (suc n) zero) -> znots n (inv Nat (suc n) zero h)

NatDec : (n m:Nat) -> dec (Path Nat n m) = split
 zero -> caseDNat (\ (m:Nat) -> dec (Path Nat zero m)) (inl (refl Nat zero)) (\ (m:Nat) -> inr (znots m))
 suc n -> caseDNat (\ (m:Nat) -> dec (Path Nat (suc n) m)) (inr (snotz n))
   (\ (m:Nat) -> decEqCong (Path Nat n m) (Path Nat (suc n) (suc m)) (\ (p:Path Nat n m) -> <i> suc (p @ i))
                 (sucInj n m) (NatDec n m))

NatSet : HSet Nat = hedberg Nat NatDec

equalNat : Nat -> Nat -> Bool = split
    zero -> split@(Nat -> Bool) with
      zero  -> true
      suc n -> false
    suc m -> split@(Nat -> Bool) with
      zero  -> false
      suc n -> equalNat m n
