module pi4s3 where


import join
import hopf
import pointedtypes
import circle12
import susp
import joinassoc
-- import exchange


mapJoin (A B C D : U) (f : A -> C) (g : B -> D) : Join A B -> Join C D = split
  inl a -> inl (f a)
  inr b -> inr (g b)
  join a b @i -> join{Join C D} (f a) (g b)@i


--  Suspension and join with the booleans
suspJoin (A : U) : Susp A -> Join Bool A = split
  north   -> inl true
  south   -> inl false
  merid a @ i -> compPath (Join Bool A) (inl true) (inr a) (inl false)
                        (<i> join {Join Bool A} true a @ i)
                        (<i>(<j> join {Join Bool A} false a @ j)@-i) @ i


case1 (A:U) : Bool -> Susp A = split
 false -> south
 true -> north 

suspJoinInv (A : U) : Join Bool A -> Susp A = split
  inl b -> case1 A b
  inr a -> south
  join b a @i -> case2 a b @ i
   where case2 (a:A) : (b : Bool) -> Id (Susp A) (suspJoinInv A (inl b)) south = split
                  false -> refl (Susp A) south
                  true  -> <i>merid{Susp A} a @i


ptJoin (pA : PointedType) (B:U) : PointedType = (Join pA.1 B, inl (pt pA))

ptBool : PointedType = (Bool,true)

bjbToS1 (x:Join Bool Bool) : S1 = S1_2_to_1 (suspJoinInv Bool x)

bjbToS1Inv (x : S1) : Join Bool Bool = suspJoin Bool (S1_2_to_1 x)

-- The map e^-1 from 7.3
s3ToS1JoinS1Inv (x : Join S1 S1) : S3 =
  suspJoinInv S2
    (mapJoin Bool (Join Bool S1) Bool S2 (\(b:Bool) -> b) (suspJoinInv S1)
      (jassoc_lr Bool Bool S1
        (mapJoin S1 S1 (Join Bool Bool) S1 bjbToS1Inv (\(z:S1) -> z) x)))


-- The map e from 7.3
s3ToS1JoinS1 (x:S3) : Join S1 S1 = 
  mapJoin (Join Bool Bool) S1 S1 S1 bjbToS1 (\(z:S1) -> z)
          (jassoc_rl Bool Bool S1
            (mapJoin Bool S2 Bool (Join Bool S1) (\(b:Bool) -> b) (suspJoin S1)
              (suspJoin S2 x)))


-- A modified version of the main map alpha from 8, which is equal to the
-- other one (to be checked) but pointed by reflexivity
alpha : Join S1 S1 -> S2 = split
  inl x   -> north
  inr y   -> north
  join x y @ i -> compPath S2 north south north (<i>merid{S2} x@i) (<i>merid{S2} y@-i)@i

ptAlpha : PointedMap (ptJoin ptS1 S1) ptS2 = (alpha, refl S2 north)

-- Letâ€™s define the twelve maps first

f0 : Z -> loopS1 = loopIt

compInvRight (A:U) (a b:A) (p:Id A a b) : Id (Id A a a) (compPath A a b a p (<i>p@-i)) (refl A a) =
 <i j>comp A (p@-i/\j) [(j=1) -> <k>p@(-k/\-i)]

ptSusp (A : U) : PointedType = (Susp A, north)

sigma (A : PointedType) : PointedMap A (Omega (ptSusp A.1))= 
 (s,s0)
  where s (x:A.1) : Id (Susp A.1) north north 
         = compPath (Susp A.1) north south north
                  (<i>merid{Susp A.1} x@i)
                  (<i>(merid{Susp A.1} (pt A))@-i)

        s0 : Id (Omega (ptSusp A.1)).1
                  (s (pt A))
                  (refl (Susp A.1) north)
         = compInvRight (Susp A.1) north south (<i>merid{Susp A.1} (pt A)@i)

f1 : loopS1 -> (itOmega two ptS2).1 = (OmegaF ptS1 (Omega ptS2) (sigma ptS1)).1

f2 : (itOmega two ptS2).1 -> (itOmega three ptS3).1 = 
 (itMapOmega two ptS2 (Omega ptS3) (sigma ptS2)).1

f3 : (itOmega three ptS3).1 -> (itOmega three (ptJoin ptS1 S1)).1
 = itMapOmegaRefl three ptS3 (Join S1 S1) s3ToS1JoinS1

f4 : (itOmega three (ptJoin ptS1 S1)).1 -> (itOmega three ptS2).1
 = itMapOmegaRefl three (ptJoin ptS1 S1) S2 ptAlpha.1

f5 : (itOmega three ptS2).1 -> (itOmega three (ptJoin ptS1 S1)).1
 = hopfLoop

oneZ : Z = sucZ zeroZ

-- WORKS
test0To1 : (itOmega two ptS2).1 = f1 (f0 oneZ)

-- WORKS
test0To2 : (itOmega three ptS3).1 = f2 test0To1

-- WORKS
test0To3 : (itOmega three (ptJoin ptS1 S1)).1 = f3 test0To2

-- WORKS
test0To4 : (itOmega three ptS2).1 = f4 test0To3

-- NOT SURE (takes a long time)
test0To5 : (itOmega three (ptJoin ptS1 S1)).1 = f5 test0To4

-- Test f5 on a generator given by the exchange law
testf5 : (itOmega three (ptJoin ptS1 S1)).1 = f5 genPi3S2
