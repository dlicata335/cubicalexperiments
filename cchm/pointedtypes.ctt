module pointedtypes where

import prelude

PointedType : U = (A : U) * A

Omega (A : PointedType) : PointedType = (Path A.1 A.2 A.2 , <_> A.2)

PointedMap (A : PointedType) (B : PointedType) : U = 
   (f : A.1 -> B.1) * (Path (B.1) (f A.2) B.2)

OmegaF (A B : PointedType) (f : PointedMap A B) : PointedMap (Omega A) (Omega B) = 
       ((\ (p : (Omega A).1) -> <x> (comp (<_> B.1) (f.1 (p @ x)) [(x=1) -> f.2, (x=0) -> f.2])) ,
        comp_inv_r2 B.1 (f.1 A.2) B.2 f.2)

TimesP (A : PointedType) (B : PointedType) : PointedType = ((_ : A.1) * B.1, (A.2 , B.2))

pt (A : PointedType) : A.1 = A.2
