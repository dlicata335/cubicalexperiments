-- based on CCHM prelude

-- The prelude. Definition of Path types and basic operations on them
-- (refl, mapOnPath, funExt...). Definition of prop, set and
-- groupoid. Some basic data types (empty, unit, or, and).

module prelude where

idfun (A : U) (a : A) : A = a

-- ----------------------------------------------------------------------
-- Path types

Path (A : U) (a0 a1 : A) : U = PathP (<i> A) a0 a1

refl (A : U) (a : A) : Path A a a = <i> a

-- --------------------------------------------------------------------
-- hlevels

Contractible (A : U) : U = (a : A) * ((b : A) -> Path A a b)
HProp (A : U) : U = (a b : A) -> Path A a b
HSet (A : U) : U = (a b : A) -> HProp (Path A a b)
OneType (A : U) : U = (a b : A) -> HSet (Path A a b)
TwoType (A : U) : U = (a b : A) -> OneType (Path A a b)

-- --------------------------------------------------------------------
-- collections

HPROP : U = (A : U) * HProp A
HSET : U = (A : U) * HSet A
ONETYPE : U = (A : U) * OneType A
TWOTYPE : U = (A : U) * TwoType A

-- --------------------------------------------------------------------
-- Sigma types

Sigma (A : U) (B : A -> U) : U = (x : A) * B x

and (A : U) (B : U) : U = (x : A) * B

Pi (A:U) (P:A->U) : U = (x:A) -> P x

-- lemPropF (A : U) (P : A -> U) (pP : (x : A) -> HProp (P x)) (a0 a1 :A)
--          (p : Path A a0 a1) (b0 : P a0) (b1 : P a1) : PathP (<i>P (p@i)) b0 b1 =
--  <i>pP (p@i) (comp (<j>P (p@i/\j)) b0 [(i=0) -> <_>b0]) (comp (<j>P (p@i\/-j)) b1 [(i=1) -> <_>b1])@i

-- other proof
-- lemPropF (A : U) (P : A -> U) (pP : (x : A) -> HProp (P x)) (a :A) :
--          (a1 : A) (p : Path A a a1) (b0 : P a) (b1 : P a1) -> PathP (<i>P (p@i)) b0 b1 =
-- J A a (\ (a1 : A) (p : Path A a a1) ->
--          (b0 : P a) (b1 : P a1) -> PathP (<i>P (p@i)) b0 b1)
--   rem
-- where rem : (b0 b1:P a) -> Path (P a) b0 b1 = pP a

-- lemSig (A : U) (B : A -> U) (pB : (x : A) -> HProp (B x))
--        (u v : (x:A) * B x) (p : Path A u.1 v.1) :
--        Path ((x:A) * B x) u v =
--   <i> (p@i,(lemPropF A B pB u.1 v.1 p u.2 v.2)@i)


--
-- lemSig computes the missing side of the following
-- square in B over p
--
--                 fill u.2
--     {      u.2 ----------> comp u.2                }
--     {       |                 |                    }
--   B {  refl |                 | pB (comp u.2) v.2  }
--     {       |                 |                    }
--     {       v                 v                    }
--     {      u.2               v.2                   }
--
--                     p
--   A {      u.1 ------------> u.2                   }
--
lemPropF (A : U) (B : A -> U) (pB : (x : A) -> HProp (B x)) (a0 a1 :A)
         (p : Path A a0 a1) (b0 : B a0) (b1 : B a1) : PathP (<i>B (p@i)) b0 b1 =
  <i> comp (<_> B (p @ i)) (filler @ i)
         [ (i=0) -> <_> b0
         , (i=1) -> pB (p @ i) (filler @ 1) b1]
  where
    filler : PathP (<i> B (p @ i)) b0 (comp (<i> B (p @ i)) b0 [])
      = fill (<i> B (p @ i)) b0 []

lemSig (A : U) (B : A -> U) (pB : (x : A) -> HProp (B x))
       (u v : (x:A) * B x) (p : Path A u.1 v.1) :
       Path ((x:A) * B x) u v =
  <i> (p @ i, lemPropF A B pB u.1 v.1 p u.2 v.2 @ i)


lemSig' (A : U) (B : A -> U) (pB : (x : A) -> HProp (B x))
        (u v : (x:A) * B x) (p : Path ((x:A) * B x) u v) :
        Path A u.1 v.1 = <i> (p @ i).1

propSig (A : U) (B : A -> U) (pA : HProp A)
        (pB : (x : A) -> HProp (B x)) (t u : (x:A) * B x) :
        Path ((x:A) * B x) t u =
  lemSig A B pB t u (pA t.1 u.1)


-- ----------------------------------------------------------------------
-- basic types

data Unit = tt

-- for controling reduction
STUCK : Unit = ?
NONSTUCK : Unit = tt

Contractible_level (A : U) : HProp (Contractible A) =
  \ (a : Contractible A) (b : Contractible A) -> eq a.1 a.2 b.1 b.2 where
  square (c1 : A) (eq1 : (x : A) -> Path A c1 x) (c2 : A) (eq2 : (x : A) -> Path A c2 x) (a : A) :
         Unit -> PathP (<x> Path A (eq1 c2 @ x) a)
             (eq1 a) (eq2 a) = split tt -> ?
--         <x><y> eq1 (eq1 c2 @ x) @ y

  eq (c1 : A) (eq1 : (x : A) -> Path A c1 x) (c2 : A) (eq2 : (x : A) -> Path A c2 x) :
        Path (Contractible A) (c1 , eq1) (c2, eq2) =
        <x> (eq1 c2 @ x , \ (a : A) -> <y> square c1 eq1 c2 eq2 a STUCK @ x @ y)

propSet (A : U) (h : HProp A) : HSet A =
 \(a b : A) (p q : Path A a b) ->
   <j i> comp (<k>A) a [ (i=0) -> h a a
                       , (i=1) -> h a b
                       , (j=0) -> h a (p @ i)
                       , (j=1) -> h a (q @ i)]

propIsProp (A : U) : HProp (HProp A) =
  \(f g : HProp A) -> <i> \(a b : A) ->
    propSet A f a b (f a b) (g a b) @ i

propIsSet (A : U) : HSet (HProp A) =
  propSet (HProp A) (propIsProp A)

setIsProp (A : U) : HProp (HSet A) =
 \(f g : HSet A) -> <i> \(a b :A) ->
   propIsProp (Path A a b) (f a b) (g a b) @ i

setIsSet (A : U) : HSet (HSet A) =
  propSet (HSet A) (setIsProp A)

oneTypeIsProp (A : U) : HProp (OneType A) =
  undefined

data Void =

abort (A : U) : Void -> A = split{}

not (A : U) : U = A -> Void

stable (A : U) : U = not (not A) -> A

Unit_level : HProp Unit = rem
  where rem1 : (x:Unit) -> Path Unit x tt = split tt -> refl Unit tt
        rem (x:Unit) : (y:Unit) -> Path Unit x y = split tt -> rem1 x

Void_level : HProp Void = \ (x y:Void) -> abort (Path Void x y) x

data Either (A B : U) = inl (a : A)
                      | inr (b : B)

Times (A B : U) : U = (_ : A) * B

-- Times_level (A B :U) (pA: prop A) (pB: A -> prop B) : prop (and A B) =
--  \ (u v:and A B) -> <i>((pA u.1 v.1)@i, (pB u.1 u.2 v.2)@i)

data Bool = true | false

data Nat = zero | suc (n : Nat)

one : Nat = suc zero
two : Nat = suc one
three : Nat = suc two

-- ----------------------------------------------------------------------
-- path stuff

funExt (A : U) (B : A -> U) (f g : (x : A) -> B x)
       (p : (x : A) -> Path (B x) (f x) (g x)) :
       Path ((y : A) -> B y) f g = <i> \(a : A) -> (p a) @ i

-- Transport can be defined using comp
trans (A B : U) (p : Path U A B) (a : A) : B = comp p a []
transNeg (A B : U) (p : Path U A B) (b : B) : A = comp (<i> p @ - i) b []

transK (A B : U) (p : Path U A B) (y : B) :
  Path B y (trans A B p (transNeg A B p y)) =
    <i> comp p (transNeg A B p y) [(i=0) -> rem1
                                  ,(i=1) -> rem2 (transNeg A B p y)]
    where
    rem1 : PathP p (transNeg A B p y) y =
      <i> comp (<j> p @ (i\/-j)) y [(i=1) -> <j>y]
    rem2 (x:A) : PathP p x (trans A B p x) =
      <i> comp (<j> p @ (i/\j)) x [(i=0) -> <j> x]

transNegK (A B : U) (p : Path U A B) (a : A) :
  Path A a (transNeg A B p (trans A B p a)) =
    <i> comp (<j> p @ -j) (trans A B p a) [(i=0) -> rem1
                                         ,(i=1) -> rem2 (trans A B p a) ]
    where
    rem1 : PathP (<i> p@-i) (trans A B p a) a =
       <i> comp (<j> p @ (-i /\ j)) a [(i=1) -> <j>a]
    rem2 (b:B) : PathP (<i> p@-i) b (transNeg A B p b) =
      <i> comp (<j> p @ (-i \/ -j)) b [(i=0) -> <j> b]

Singleton (A : U) (a : A) : U = (x : A) * Path A a x

Singleton_level (A : U) (a : A) : Contractible ((b : A) * Path A a b)  =
  ( (a , <_> a) , \ (bp : ((b : A) * Path A a b)) -> <x> (bp.2 @ x , <y> bp.2 @ (x/\y)) )

contrSingl (A : U) (a b : A) (p : Path A a b) :
  Path (Singleton A a) (a,refl A a) (b,p) = <i> (p @ i,<j> p @ i/\j)

inv (A : U) (a b : A) (p : Path A a b) : Path A b a = <i> p @ -i

compPath (A : U) (a b c : A) (p : Path A a b) (q : Path A b c) : Path A a c =
  <i> comp (<j>A) (p @ i) [ (i = 1) -> q, (i=0) -> <j> a ]

compU (A B C : U) (p : Path U A B) (q : Path U B C) : Path U A C =
  <x> comp (<_> U) (p @ x) [(x=0) -> <_> A, (x=1) -> q]

ap (A : U) (B : A -> U)
   (f : (x : A) -> B x)
   (a0 : A) (a1 : A) (a : Path A a0 a1) :
   PathP (<x> B (a @ x)) (f a0) (f a1) =
   <x> f (a @ x)

-- coe a : b -> c = (b/\c) \/ (b/\-a) \/ (c/\a)
-- coe z : x -> 0 = (x/\-z)
-- coe z : 1 -> y = y \/ -z \/ (z/\y)

-- subst can be defined using trans:
substTrans (A : U) (P : A -> U) (a b : A) (p : Path A a b) (e : P a) : P b =
  trans (P a) (P b) (ap A (\ (x : A) -> U) P a b p) e

substEq (A : U) (P : A -> U) (a : A) (e : P a)
  : Path (P a) e (substTrans A P a a (refl A a) e) =
  fill (<i> P a) e []

J (A : U) (a : A) (C : (x : A) -> Path A a x -> U)
  (d : C a (refl A a)) (x : A) (p : Path A a x) : C x p =
    substTrans (Singleton A a) T (a, refl A a) (x, p) (contrSingl A a x p) d
      where T (z : Singleton A a) : U = C (z.1) (z.2)

JEq (A : U) (a : A) (C : (x : A) -> Path A a x -> U) (d : C a (refl A a))
  : Path (C a (refl A a)) d (J A a C d a (refl A a)) =
  substEq (Singleton A a) T (a, refl A a) d
    where T (z : Singleton A a) : U = C (z.1) (z.2)

hom_to_het_1_path (A0 : U) : (A1 : U) (A : Path U A0 A1) (a0 : A0) (a1 : A1) -> Path U (Path A1 (transport A a0) a1) (PathP A a0 a1) =
  J U A0
   (\ (A1 : U) (A : Path U A0 A1) ->
      (a0 : A0) (a1 : A1) -> Path U (Path A1 (transport A a0) a1) (PathP A a0 a1))
   (\ (a0 : A0) (a1 : A0) -> <x> Path A0 (fill (<_> A0) a0 [] @ -x) a1)

hom_to_het_1 (A0 : U) (A1 : U) (A : Path U A0 A1) (a0 : A0) (a1 : A1) (p : Path A1 (transport A a0) a1) : PathP A a0 a1 =
  transport (hom_to_het_1_path A0 A1 A a0 a1) p


hom_to_het_0_path (A0 : U) : (A1 : U) (A : Path U A0 A1) (a0 : A0) (a1 : A1) -> Path U (Path A0 a0 (transport (<x> A @ -x) a1)) (PathP A a0 a1) =
  J U A0
    (\ (A1 : U) (A : Path U A0 A1) ->
       (a0 : A0) (a1 : A1) -> Path U (Path A0 a0 (transport (<x> A @ -x) a1)) (PathP A a0 a1))
    (\ (a0 : A0) (a1 : A0) -> <x> Path A0 a0 (fill (<_> A0) a1 [] @ -x))


move_transport_right_path (A0 : U) (A1 : U) (A : Path U A0 A1) (a0 : A0) (a1 : A1) : Path U (Path A1 (transport A a0) a1) (Path A0 a0 (transport (<x> A @ -x) a1)) =
  <x> Path (A @ -x) (fill A a0 [] @ -x) (fill (<y> A @ -y) a1 [] @ x)



transport_inv (A0 : U) (A1 : U) (A : Path U A0 A1) (a1 : A1) : Path A1 (transport A (transport (<x> A @ -x) a1)) a1 =
  J U A0
    (\ (A1 : U) (A : Path U A0 A1) -> (a1 : A1) -> Path A1 (transport A (transport (<x> A @ -x) a1)) a1)
    (\ (a0 : A0) ->
       compPath A0
         (comp (<_> A0) (comp (<_> A0) a0 []) [])
         (comp (<_> A0) a0 []) a0
         (<x> fill (<_> A0) (comp (<_> A0) a0 []) [] @ -x)
         (<x> fill (<_> A0) a0 [] @ -x))
    A1 A a1



-- FIXME there should be a more direct proof
-- but normal form seems not that bad
-- funext_het_l (A0 A1 : U) (A : Path U A0 A1) :
--              (B0 : A0 -> U) (B1 : A1 -> U) (B : PathP (<x> A @ x -> U) B0 B1)
--              (f0 : (a0 : A0) -> B0 a0) (f1 : (a1 : A1) -> B1 a1)
--              (f : (a0 : A0) -> PathP (<x> (B @ x) ((fill A a0 []) @ x)) (f0 a0) (f1 (transport A a0))) ->
--              PathP (<x> (a : A @ x) -> (B @ x) a) f0 f1 = ?
--              J U A0 (\ (A1 : U) (A : Path U A0 A1) ->
--                        (B0 : A0 -> U) (B1 : A1 -> U) (B : PathP (<x> A @ x -> U) B0 B1)
--                        (f0 : (a0 : A0) -> B0 a0) (f1 : (a1 : A1) -> B1 a1)
--                        (f : (a0 : A0) -> PathP (<x> (B @ x) ((fill A a0 []) @ x)) (f0 a0) (f1 (transport A a0)))
--                        -> PathP (<x> (a : A @ x) -> (B @ x) a) f0 f1)
--                     (\ (B0 : A0 -> U) (B1 : A0 -> U) (B : PathP (<_> A0 -> U) B0 B1)
--                        (f0 : (a0 : A0) -> B0 a0) (f1 : (a1 : A0) -> B1 a1)
--                        (f : (a0 : A0) -> PathP (<x> (B @ x) a0) (f0 a0) (f1 a0))
--                        -> <x> \ (a : A0) -> f a @ x)
--                     A1 A

-- funext3 (A0 A1 : U) (A : Path U A0 A1)
--         (B0 : A0 -> U) (B1 : A1 -> U) (B : PathP (<x> A @ x -> U) B0 B1)
--         (f0 : (a0 : A0) -> B0 a0) (f1 : (a1 : A1) -> B1 a1)
--         (f : (a0 : A0) (a1 : A1) (a : PathP A a0 a1) -> PathP (<x> (B @ x) (a @ x)) (f0 a0) (f1 a1)) : Unit ->
--         PathP (<x> (a : A @ x) -> B @ x a) f0 f1 = split
--    tt ->
--       funext_het_l A0 A1 A B0 B1 B f0 f1 (\ (a0 : A0) -> f a0 (transport A a0) (fill A a0 []))

-- funext3_step (S : Unit) (A0 : U) : Unit -> (A1 : U) (A : Path U A0 A1)
--              (B0 : A0 -> U) (B1 : A1 -> U) (B : PathP (<x> A @ x -> U) B0 B1)
--              (f0 : (a0 : A0) -> B0 a0) (f1 : (a1 : A1) -> B1 a1)
--              (f : (a0 : A0) (a1 : A1) (a : PathP A a0 a1) -> PathP (<x> (B @ x) (a @ x)) (f0 a0) (f1 a1))
--              (a0 : A0) (a1 : A1) (a : PathP A a0 a1) ->
--                Path (PathP (<x> B @ x (a @ x)) (f0 a0) (f1 a1))
--                   (<x> (funext3 A0 A1 A B0 B1 B f0 f1 f S) @ x (a @ x))
--                   (f a0 a1 a) = split
--    tt ->
--             J U A0 (\ (A1 : U) (A : Path U A0 A1) ->
--                    (B0 : A0 -> U) (B1 : A1 -> U) (B : PathP (<x> A @ x -> U) B0 B1)
--                    (f0 : (a0 : A0) -> B0 a0) (f1 : (a1 : A1) -> B1 a1)
--                    (f : (a0 : A0) (a1 : A1) (a : PathP A a0 a1) -> PathP (<x> (B @ x) (a @ x)) (f0 a0) (f1 a1))
--                    (a0 : A0) (a1 : A1) (a : PathP A a0 a1) ->
--                      Path (PathP (<x> B @ x (a @ x)) (f0 a0) (f1 a1))
--                         (<x> (funext3 A0 A1 A B0 B1 B f0 f1 f S) @ x (a @ x))
--                         (f a0 a1 a))
--                 (\ (B0 : A0 -> U) (B1 : A0 -> U) (B : Path (A0 -> U) B0 B1)
--                    (f0 : (a0 : A0) -> B0 a0) (f1 : (a1 : A0) -> B1 a1)
--                    (f : (a0 : A0) (a1 : A0) (a : Path A0 a0 a1) -> PathP (<x> (B @ x) (a @ x)) (f0 a0) (f1 a1))
--                    (a0 : A0) ->
--                    J A0 a0 (\ (a1 : A0) (a : Path A0 a0 a1) ->
--                            Path (PathP (<x> B @ x (a @ x)) (f0 a0) (f1 a1))
--                               (<x> (funext3 A0 A0 (<_> A0) B0 B1 B f0 f1 f S) @ x (a @ x))
--                               (f a0 a1 a))
--                         (unstuck B0 B1 B f0 f1 f a0 S)) where
--       unstuck (B0 : A0 -> U) (B1 : A0 -> U) (B : Path (A0 -> U) B0 B1)
--              (f0 : (a0 : A0) -> B0 a0) (f1 : (a1 : A0) -> B1 a1)
--              (f : (a0 : A0) (a1 : A0) (a : Path A0 a0 a1) -> PathP (<x> (B @ x) (a @ x)) (f0 a0) (f1 a1))
--              (a0 : A0) : (S : Unit)
--               -> Path (PathP (<x> B @ x a0) (f0 a0) (f1 a0)) (<x> (funext3 A0 A0 (<_> A0) B0 B1 B f0 f1 f S) @ x a0) (f a0 a0 (<_> a0)) = split
--         tt -> (<_> (f a0 a0 (<_> a0)))

-- funext3_constant_range (A0 A1 : U) (A : Path U A0 A1)
--                        (B : U)
--                        (f0 : A0 -> B) (f1 : A1 -> B)
--                        (f : (a0 : A0) (a1 : A1) (a : PathP A a0 a1) -> Path B (f0 a0) (f1 a1)) :
--                        PathP (<x> (a : A @ x) -> B) f0 f1 =
--    funext3 A0 A1 A (\ (a : A0) -> B) (\ (a : A1) -> B) (<x> \ (a : A @ x) -> B) f0 f1 f STUCK

-- funext3_constant_range_step (A0 A1 : U) (A : Path U A0 A1)
--                             (B : U)
--                             (f0 : A0 -> B) (f1 : A1 -> B)
--                             (f : (a0 : A0) (a1 : A1) (a : PathP A a0 a1) -> Path B (f0 a0) (f1 a1))
--                             (a0 : A0) (a1 : A1) (a : PathP A a0 a1) :
--                             Path (Path B (f0 a0) (f1 a1))
--                                (<x> (funext3_constant_range A0 A1 A B f0 f1 f) @ x (a @ x))
--                                (f a0 a1 a) =
--   funext3_step STUCK A0 STUCK A1 A (\ (a : A0) -> B) (\ (a : A1) -> B) (<x> \ (a : A @ x) -> B) f0 f1 f a0 a1 a

whisker_square_bot
  (A : U) (a0 a1 : A) (b0 b1 : A)
  (top : Path A a0 a1)
  (bot : Path A b0 b1)
  (left : Path A a0 b0)
  (right : Path A a1 b1)
  (sq : PathP (<x> Path A (top @ x) (bot @ x)) left right)
  (bot' : Path A b0 b1) (p : Path (Path A b0 b1) bot bot')
    : (PathP (<x> Path A (top @ x) (bot' @ x)) left right)
  = <x> <y>
      comp
        (<_> A)
        (sq @ x @ y)
        [(x=0) -> <z> left @ y,
         (x=1) -> <z> right @ y,
         (y=0) -> <z> top @ x,
         (y=1) -> <z> p @ z @ x]

whisker_square_top
  (A : U) (t0 t1 : A) (b0 b1 : A)
  (top : Path A t0 t1)
  (bot : Path A b0 b1)
  (left : Path A t0 b0)
  (right : Path A t1 b1)
  (sq : PathP (<x> Path A (top @ x) (bot @ x)) left right)
  (top' : Path A t0 t1) (p : Path (Path A t0 t1) top top')
    : (PathP (<x> Path A (top' @ x) (bot @ x)) left right)
  = <x> <y>
      comp
        (<_> A)
        (sq @ x @ y)
        [(x=0) -> <z> left @ y,
         (x=1) -> <z> right @ y,
         (y=0) -> <z> p @ z @ x,
         (y=1) -> <z> bot @ x]

eliminate_composite_top_right (A : U) (t0 t1 b0 b1 : A)
        (top : Path A t0 b1)
        (bot : Path A b0 b1)
        (left : Path A t0 b0)
        (right : Path A t1 b1)
        (sq : PathP (<x> Path A (top @ x) (bot @ x)) left (< _ > b1)) :
        PathP (<x> Path A ((compPath A t0 b1 t1 top (<z> right @ -z)) @ x) (bot @ x)) left right =
              J A t1 ( \ (b1 : A) (right : Path A t1 b1) ->
                 (top : Path A t0 b1)
                 (bot : Path A b0 b1)
                 (left : Path A t0 b0)
                 (sq : PathP (<x> Path A (top @ x) (bot @ x)) left (< _ > b1))
                 -> PathP (<x> Path A ((compPath A t0 b1 t1 top (<z> right @ -z)) @ x) (bot @ x)) left right
                 )
              ( \ (top : Path A t0 t1)
                 (bot : Path A b0 t1)
                 (left : Path A t0 b0)
                 (sq : PathP (<x> Path A (top @ x) (bot @ x)) left (<_> t1))
                 -> <x y> comp (<_> A) (sq @ x @ y)
                    [(x = 0) -> <_> left @ y,
                     (x = 1) -> <_> t1,
                     (y = 1) -> <_> bot @ x,
                     (y = 0) -> fill (<_> A) (top @ x) [(x = 0) -> <_> top @ 0, (x = 1) -> <_> top @ 1]
                    ]
                 ) b1 right top bot left sq

constSquare (A : U) (a : A) (p : Path A a a) :
            PathP (<x> Path A (p @ x) (p @ x))
                p
                p =
  <i j> comp (<_> A) a
     [(i = 0) -> <k> p @ (j \/ - k),
      (i = 1) -> <k> p @ (j /\ k),
      (j = 0) -> <k> p @ (i \/ - k),
      (j = 1) -> <k> p @ (i /\ k)]

--         u
--    a0 -----> a1
--    |         |
-- r0 |         | r1
--    |         |
--    V         V
--    b0 -----> b1
--         v
Square (A : U) (a0 a1 b0 b1 : A)
               (u : Path A a0 a1) (v : Path A b0 b1)
               (r0 : Path A a0 b0) (r1 : Path A a1 b1) : U
  = PathP (<i> (PathP (<j> A) (u @ i) (v @ i))) r0 r1

constSquare (A : U) (a : A) (p : Path A a a) : Square A a a a a p p p p =
  <i j> comp (<k>A) a
     [(i = 0) -> <k> p @ (j \/ - k),
      (i = 1) -> <k> p @ (j /\ k),
      (j = 0) -> <k> p @ (i \/ - k),
      (j = 1) -> <k> p @ (i /\ k)]

comp_inv_r (A : U) (a0 : A) (a1 : A) (p : Path A a0 a1) : Path (Path A a0 a0) (<y> comp (<_> A) (p @ y) [ (y=0) -> <_> a0, (y = 1) -> <y> p @ -y]) (<_> a0) =
  <x y> comp (<_> A) (p @ y /\ -x)
     [(y = 0) -> <_> a0,
      (y = 1) -> <z> p @ -z /\ -x,
      (x = 1) -> <_> a0]

comp_inv_r2 (A : U) (a0 : A) : (a1 : A) (p : Path A a0 a1) -> Path (Path A a1 a1) (<y> comp (<_> A) a0 [ (y = 0) -> <y> p @ y, (y = 1) -> <y> p @ y ]) (<_> a1) =
   J A a0
     (\(a1 : A) (p : Path A a0 a1) -> Path (Path A a1 a1) (<y> comp (<_> A) a0 [ (y = 0) -> p, (y = 1) -> <y> p @ y ]) (<_> a1))
     (<x> fill (<_> Path A a0 a0) (<_> a0) [] @ -x)


-- ----------------------------------------------------------------------
-- hlevels

raise_Contractible_Prop (A : U) (Alevel : Contractible A) : HProp A =
  \(a : A) (b : A) ->
    <x> comp (<_> A) (Alevel.2 a @ -x) [(x = 0) -> <_> a, (x=1) -> <x> Alevel.2 b @ x]



raise_Prop_Set (A : U) (h : HProp A) (a b : A) (p q : Path A a b) : Path (Path A a b) p q =
 <j i> comp (<_> A) a [ (i=0) -> h a a
                      , (i=1) -> h a b
                      , (j=0) -> h a (p @ i)
                      , (j=1) -> h a (q @ i)]

HProp_level (A : U) (f g : HProp A) : Path (HProp A) f g =
 <i> \(a b :A) -> (raise_Prop_Set A f a b (f a b) (g a b)) @ i

HSet_level (A : U) (f g : HSet A) : Path (HSet A) f g =
 <i> \(a b :A) -> (HProp_level (Path A a b) (f a b) (g a b)) @ i

Pi_level_prop (A : U) (B : A -> U) (h : (x : A) -> HProp (B x))
       (f0 f1 : (x : A) -> B x) : Path ((x : A) -> B x) f0 f1
  = <i> \ (x:A) -> (h x (f0 x) (f1 x)) @ i



----------- subst and funDepTr -----------

subst (A : U) (P : A -> U) (a0 a1 : A) (p : Path A a0 a1) (b : P a0) : P a1 = comp (<x> P (p @ x)) b []

substInv (A : U) (P : A -> U) (a0 a1 : A) (p : Path A a0 a1) (b : P a1) : P a0 = comp (<x> P (p @ -x)) b []

funDepTr (A0 A1 :U) (p:Path U A0 A1) (u0:A0) (u1:A1) : Path U (PathP p u0 u1) (Path A1 (comp p u0 []) u1) =
  <i>
    comp
      (<_> U)
      (PathP p (fill (<_> A0) u0 [] @ i) u1)
      [(i=1) -> <j> PathP (<k> p @ j\/k) (comp (<k> p @ j/\k) u0 []) u1,
       (i=0) -> <_> PathP p u0 u1]


------------- Discrete -------------------

dec (A : U) : U = Either A (not A)

Discrete (A : U) : U = (a b : A) -> dec (Path A a b)




--- Prop----------

propVoid : HProp Void = \ (x y:Void) -> abort (Path Void x y) x

propNot (A:U) : HProp (not A) = \ (f g:not A) -> <i>\(x:A) -> (propVoid (f x) (g x))@i

dNot (A:U) (a:A) : not (not A) = \ (h : not A) -> h a

--- Const ---

const (A : U) (f : A -> A) : U = (x y : A) -> Path A (f x) (f y)

exConst (A : U) : U = (f:A -> A) * const A f

stableConst (A : U) (sA: stable A) : exConst A =
 (\ (x:A) -> sA (dNot A x),\ (x y:A) -> <i>sA (propNot (not A) (dNot A x) (dNot A y) @ i))

decStable (A:U) : dec A -> stable A = split
 inl a -> \ (h :not (not A)) -> a
 inr b -> \ (h :not (not A)) -> abort A (h b)

decEqCong (A B : U) (f : A -> B) (g : B -> A) : dec A -> dec B = split
  inl a -> inl (f a)
  inr h -> inr (\ (b:B) -> h (g b))


---- Path lemmas --

inv (A : U) (a b : A) (p : Path A a b) : Path A b a = <i> p @ -i

compPath (A : U) (a b c : A) (p : Path A a b) (q : Path A b c) : Path A a c =
  <i> comp (<j>A) (p @ i) [ (i = 1) -> q, (i=0) -> <j> a ]

compPath' (A : U) (a b c : A) (p : Path A a b) (q : Path A b c) : Path A a c =
  subst A (Path A a) b c q p

compPath'' (A : U) (a b : A) (p : Path A a b) : (c : A) -> (q : Path A b c) -> Path A a c =
  J A a ( \ (b : A) (p : Path A a b) -> (c : A) -> (q : Path A b c) -> Path A a c) rem b p
    where rem (c : A) (p : Path A a c) : Path A a c = p

compUp (A : U) (a a' b b' : A)
       (p : Path A a a') (q : Path A b b') (r : Path A a b) : Path A a' b' =
  <i> comp (<j>A) (r @ i) [(i = 0) -> p, (i = 1) -> q]

compDown (A : U) (a a' b b' : A)
         (p : Path A a a') (q: Path A b b') : Path A a' b' -> Path A a b =
 compUp A a' a b' b (inv A a a' p) (inv A b b' q)

lemCompInv (A:U) (a b c:A) (p:Path A a b) (q:Path A b c)
  : Path (Path A a b) (compPath A a c b (compPath A a b c p q) (inv A b c q)) p =
  <j i> comp (<k>A)
          ((fill (<k>A) (p @ i) [(i=0) -> <k>a, (i=1) -> q]) @ -j)
          [ (i=0) -> <k> a
          , (i=1) -> <k> q @ - (j \/  k)
          , (j=0) -> fill (<k>A) ((compPath A a b c p q @ i))
                       [(i=0) -> <k>a, (i=1) -> <k> q @ -k ]
          , (j=1) -> <k> p @ i
          ]

lemCompInv2 (A:U) (a b:A) (q:Path A a b) : (x:A) (p:Path A b x) -> Path (Path A a b) q (compPath A a x b (compPath A a b x q p) (<i>p@-i)) =
 J A b (\ (x:A) (p:Path A b x) -> Path (Path A a b) q (compPath A a x b (compPath A a b x q p) (<i>p@-i))) rem
 where rem : Path (Path A a b) q
                           (<i>comp (<_>A) (comp (<_>A) (q@i) [(i=0) -> <_>a,(i=1) -> <_>b]) [(i=0) -> <_>a,(i=1) -> <_>b]) =
          <j i>comp (<_>A) (comp (<_>A) (q@i) [(j=0) -> <_>q@i,(i=0) -> <_>a,(i=1) -> <_>b]) [(j=0) -> <_>q@i,(i=0) -> <_>a,(i=1) -> <_>b]


lemInv (A:U) (a b:A) (p:Path A a b) : Path (Path A b b) (compPath A b a b (inv A a b p) p)  (refl A b) =
   <j i> comp (<k>A) (p @ (-i \/ j)) [(i=0) -> <l>b, (j=1) -> <l>b, (i=1) -> <k> p @ (j \/ k)]


compInvRight (A:U) (a b:A) (p:Path A a b) : Path (Path A a a) (compPath A a b a p (<i>p@-i)) (refl A a) =
  lemInv A b a (<x> p @ -x)
