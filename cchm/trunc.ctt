module trunc where

import prelude
import collection

data propTrunc (A : U)
  = inc (a : A)
  | inh (a b : propTrunc A) <i> [(i=0) -> a, (i=1) -> b]

propTruncIsProp (A : U) : HProp (propTrunc A) =
  \(a b : propTrunc A) -> <i> inh {propTrunc A} a b @ i

propTruncRec (A B : U)(pB : HProp B)(f : A -> B) : propTrunc A -> B =
  split
    inc x -> f x
    inh x y @ i -> pB (propTruncRec A B pB f x) (propTruncRec A B pB f y) @ i

data setTrunc (A : U)
  = inc (a : A)
  | inh (a b : setTrunc A) (p q : Path (setTrunc A) a b)
    <i j> [ (i = 0) -> p @ j
          , (i = 1) -> q @ j
          , (j = 0) -> a
          , (j = 1) -> b ]

setTruncIsSet (A : U) : HSet (setTrunc A) =
  \(a b : setTrunc A)(p q : Path (setTrunc A) a b)
    -> <i j> inh {setTrunc A} a b p q @ i @ j

setTruncRec (A B : U)(sB : HSet B)(f : A -> B) : setTrunc A -> B =
  split
    inc x -> f x
    inh x y p q @ i j -> sB (rec x) (rec y) (<i> rec (p @ i)) (<i> rec (q @ i)) @ i @ j where
      rec : setTrunc A -> B = setTruncRec A B sB f

data oneTrunc (A : U)
  = inc (a : A)
  | inh (a b : oneTrunc A) (p q : Path (oneTrunc A) a b)
            (r s: Path (Path (oneTrunc A) a b) p q) <i j k>
       [ (i=0) -> r @ j @ k
       , (i=1) -> s @ j @ k
       , (j=0) -> p @ k
       , (j=1) -> q @ k
       , (k=0) -> a
       , (k=1) -> b]

oneTruncIsOneType (A : U) : OneType (oneTrunc A) =
  \(a b : oneTrunc A)
   (p q : Path (oneTrunc A) a b)
   (r s : Path (Path (oneTrunc A) a b) p q)
   -> <i j k> inh {oneTrunc A} a b p q r s @ i @ j @ k

oneTruncRec (A B : U)(otB : OneType B)(f : A -> B) : oneTrunc A -> B =
  split
    inc x -> f x
    inh x y p q r s @ i j k ->
      otB (rec x) (rec y) (<i> rec (p @ i)) (<i> rec (q @ i))
        (<i j> rec (r @ i @ j)) (<i j> rec (s @ i @ j)) @ i @ j @ k where
          rec : oneTrunc A -> B = oneTruncRec A B otB f

data twoTrunc (A : U)
  = inc (a : A)
  | inh (a b : twoTrunc A) (p q : Path (twoTrunc A) a b)
        (r s: Path (Path (twoTrunc A) a b) p q)
        (u v : Path (Path (Path (twoTrunc A) a b) p q) r s) <i j k l>
       [ (i=0) -> u @ j @ k @ l
       , (i=1) -> v @ j @ k @ l
       , (j=0) -> r @ k @ l
       , (j=1) -> s @ k @ l
       , (k=0) -> p @ l
       , (k=1) -> q @ l
       , (l=0) -> a
       , (l=1) -> b ]

twoTruncIsTwoType (A : U) : TwoType (twoTrunc A) =
  \(a b : twoTrunc A)
   (p q : Path (twoTrunc A) a b)
   (r s : Path (Path (twoTrunc A) a b) p q)
   (u v : Path (Path (Path (twoTrunc A) a b) p q) r s)
   -> <i j k l> inh {twoTrunc A} a b p q r s u v @ i @ j @ k @ l

twoTruncRec (A B : U)(twB : TwoType B)(f : A -> B) : twoTrunc A -> B =
  split
    inc x -> f x
    inh x y p q r s u v @ i j k l ->
      twB (rec x) (rec y) (<i> rec (p @ i)) (<i> rec (q @ i))
        (<i j> rec (r @ i @ j)) (<i j> rec (s @ i @ j))
        (<i j k> rec (u @ i @ j @ k)) (<i j k> rec (v @ i @ j @ k)) @ i @ j @ k @ l where
          rec : twoTrunc A -> B = twoTruncRec A B twB f

-- General n-trunction
-- This HIT currently does not work properly
-- data Nat' = minusOne | suc (n : Nat')

-- suc' : Nat' -> Nat = split
--   minusOne -> zero
--   suc n    -> suc (suc' n)

-- data Trunc (A : U)(n : Nat')
--   = inc (A : U)
--   | hub (r : S (suc' n) -> Trunc A n)
--   | spoke (r : S (suc' n) -> Trunc A n)(x : S (suc' n))
--      <i> [ (i=0) -> r x, (i=1) -> hub r ]

pathSpacePropTrunc (A : U) (x y : A) :
  propTrunc (Path A x y) -> Path (setTrunc A) (inc x) (inc y) =
    propTruncRec (Path A x y) (Path (setTrunc A) (inc x) (inc y))
      (setTruncIsSet A (inc x) (inc y))
        (\ (p : Path A x y) -> <i> inc (p @ i))

pathSpaceSetTrunc (A : U) (x y : A) :
  setTrunc (Path A x y) -> Path (oneTrunc A) (inc x) (inc y) =
    setTruncRec (Path A x y) (Path (oneTrunc A) (inc x) (inc y))
      (oneTruncIsOneType A (inc x) (inc y))
        (\ (p : Path A x y) -> <i> inc (p @ i))

pathSpaceOneTrunc (A : U) (x y : A) :
  oneTrunc (Path A x y) -> Path (twoTrunc A) (inc x) (inc y) =
    oneTruncRec (Path A x y) (Path (twoTrunc A) (inc x) (inc y))
      (twoTruncIsTwoType A (inc x) (inc y))
        (\ (p : Path A x y) -> <i> inc (p @ i))

setTruncPathSpace (A : U) (x y : A)
  (p : Path (setTrunc A) (inc x) (inc y)) : propTrunc (Path A x y) =
    comp (<i> (P (p @ i)).1) (inc (<_> x)) [] where
      P : setTrunc A -> HPROP =
        setTruncRec A HPROP HPROPisSet
          (\ (y : A) -> (propTrunc (Path A x y), propTruncIsProp (Path A x y)))

oneTruncPathSpace (A : U) (x y : A)
  (p : Path (oneTrunc A) (inc x) (inc y)) : setTrunc (Path A x y) =
    comp (<i> (P (p @ i)).1) (inc (<_> x)) [] where
      P : oneTrunc A -> HSET =
       oneTruncRec A HSET HSETisOneType
         (\ (y : A) -> (setTrunc (Path A x y), setTruncIsSet (Path A x y)))

twoTruncPathSpace (A : U) (x y : A)
  (p : Path (twoTrunc A) (inc x) (inc y)) : oneTrunc (Path A x y) =
    comp (<i> (P (p @ i)).1) (inc (<_> x)) [] where
      P : twoTrunc A -> ONETYPE =
       twoTruncRec A ONETYPE ONETYPEisTwoType
         (\ (y : A) -> (oneTrunc (Path A x y), oneTruncIsOneType (Path A x y)))
