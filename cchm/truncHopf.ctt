module truncHopf where

import hopf
import susp
import trunc

Trunc2S2 : U = twoTrunc S2

mu2southJoin (s : S1) : Bool -> Path Trunc2S2 (inc (joinl false)) (inc (joinl false)) =
  split
    true -> <i> inc (comp (<_> S2) (joinl true) [(i = 0) -> <j> merid S1 base @ j,
                                                 (i = 1) -> <j> merid S1 s    @ j])
    false -> <_> (inc (joinl false))

mu2south : S2 -> Trunc2S2 = split
 joinl b -> inc (joinl false)
 joinr s -> inc (joinl false)
 join a b @ i -> mu2southJoin b a @ i

lemma (A : U) (a b : A) (p q : Path A a b) :
           PathP (<i> Path A (q @ i) (q @ i))
                 (<_> a)
                 (<i> comp (<_> A) a [(i = 0) -> p, (i = 1) -> p])
 = <i j> comp (<_> A) (comp (<_> A) (q @ i) [(i = 0) -> <_> a, (i = 1) -> <l> p @ -l])
              [(i = 0) -> <_> a,
               (i = 1) -> fill (<_> A) a [(j = 0) -> p, (j = 1) -> p],
               (j = 0) -> <k> fill (<_> A) (q @ i) [(i = 0) -> <_> a, (i = 1) -> <l> p @ -l] @ -k,
               (j = 1) -> <k> fill (<_> A) (q @ i) [(i = 0) -> <_> a, (i = 1) -> <l> p @ -l] @ -k]

mu2meridmeridbase (y : S1) : PathP (<i> Path Trunc2S2 (inc (merid S1 y @ i)) (mu2south (merid S1 y @ i)))
                                   (<j> inc (merid S1 base @ j))
                                   (<j> inc (comp (<_> S2) (joinl true) [(j = 0) -> <k> merid S1 base @ k,
                                                                         (j = 1) -> <k> merid S1 base @ k ]))
 = <i j> comp (<_> Trunc2S2) (inc (joinl true))
              [(i = 0) -> <k> inc (merid S1 base @ (k /\ j)),
               (i = 1) -> <k> inc (lemma S2 (joinl true) (joinl false)
                                         (<j> merid S1 base @ j)
                                         (<j> merid S1 y @ j)
                                   @ k @ j),
               (j = 0) -> <k> inc (merid S1 y @ (k /\ i)),
               (j = 1) -> <k> inc (fill (<_> S2) (joinl true) [(i = 0) -> <l> merid S1 base @ l,
                                                               (i = 1) -> <l> merid S1 y    @ l] @ k)]

-- mu2meridmeridxbase (x : S1) : PathP (<i> Path Trunc2S2 (inc (merid S1 base @ i))
--                                                        (mu2south (merid S1 base @ i)))
--                                     (<i> inc (merid S1 x @ i))
--                                     (<i> inc (comp (<_> S2) (joinl true) [(i = 0) -> <k> merid S1 base @ k,
--                                                                           (i = 1) -> <k> merid S1 x    @ k]))
--  = undefined
--  -- = <j i> comp (<_> Trunc2S2) (inc (joinl true))
--  --              [(i = 0) -> <k> inc (merid S1 base @ (k /\ j)),
--  --               (i = 1) -> <k> inc (lemma S2 (joinl true) (joinl false)
--  --                                         (<j> merid S1 base @ j)
--  --                                         (<j> merid S1 x @ j)
--  --                                   @ k @ j),
--  --               (j = 0) -> <k> inc (merid S1 x @ (k /\ i)),
--  --               (j = 1) -> <k> inc (fill (<_> S2) (joinl true) [(i = 0) -> <l> merid S1 base @ l,
--  --                                                               (i = 1) -> <l> merid S1 x    @ l] @ k)]

-- -- test : Path (PathP (<i> Path Trunc2S2 (inc (merid{S2} base @ i)) (mu2south (merid{S2} base @ i)))
-- --                                    (<j> inc (merid{S2} base @ j))
-- --                                    (<j> inc (comp (<_> S2) north [(j = 0) -> <k> merid{S2} base @ k,
-- --                                                                   (j = 1) -> <k> merid{S2} base @ k])))
-- --             (mu2meridmeridbase base) (<i j> mu2meridmeridxbase base @ j @ i)
-- --  = <_> (mu2meridmeridbase base)

-- mu2meridmeridloopbase : PathP (<k> PathP (<i> Path Trunc2S2 (inc (merid S1 base @ i))
--                                                                  (mu2south (merid S1 base @ i)))
--                                          (<i> inc (merid S1 (loop{S1} @ k) @ i))
--                                          (<i> inc (comp (<_> S2) (joinl true)
--                                                         [(i = 0) -> <l> merid S1 base @ l,
--                                                          (i = 1) -> <l> merid S1 (loop{S1} @ k) @ l])))
--                               (mu2meridmeridbase base)
--                               (mu2meridmeridbase base)
--  = <k> mu2meridmeridxbase (loop{S1} @ k)

-- mu2meridmeridloop : (y : S1) -> PathP (<k> PathP (<i> Path Trunc2S2 (inc (merid S1 y @ i))
--                                                                     (mu2south (merid S1 y @ i)))
--                                                  (<j> inc (merid S1 (loop{S1} @ k) @ j))
--                                                  (<j> inc (comp (<_> S2) (joinl true)
--                                                                 [(j = 0) -> <l> merid S1 base @ l,
--                                                                  (j = 1) -> <l> merid S1 (loop{S1} @ k) @ l])))
--                                       (mu2meridmeridbase y)
--                                       (mu2meridmeridbase y)
--  = split
--      base -> mu2meridmeridloopbase
--      loop @ i -> ? -- mu2meridmeridlooploop @ i

-- mu2meridmerid : (x : S1) (y : S1) -> PathP (<i> Path Trunc2S2 (inc (merid S1 y @ i)) (mu2south (merid S1 y @ i)))
--                                            (<j> inc (merid S1 x @ j))
--                                            (<j> inc (comp (<_> S2) (joinl true) [(j = 0) -> <k> merid S1 base @ k,
--                                                                                  (j = 1) -> <k> merid S1 x    @ k]))
--  = split
--      base -> mu2meridmeridbase
--      loop @ i -> \ (y : S1) -> mu2meridmeridloop y @ i

mu2merid (x : S1) : (y : S2) -> Path Trunc2S2 (inc y) (mu2south y)
 = split
     joinl b ->
       let rem : Bool -> Path Trunc2S2 (inc (joinl b)) (mu2south (joinl b)) = split
             true -> <j> inc (merid S1 x @ j)
             false -> <j> inc (comp (<_> S2) (joinl true) [(j = 0) -> <k> merid S1 base @ k,
                                                           (j = 1) -> <k> merid S1 x    @ k])
       in rem b
     joinr s -> <j> inc (comp (<_> S2) (joinl true) [(j = 0) -> <k> merid S1 base @ k,
                                                     (j = 1) -> <k> merid S1 x    @ k])

     join b s @ i -> ? -- mu2meridmerid x y @ i

mu2 : S2 -> S2 -> Trunc2S2
 = split
     joinl b ->
       let rem : Bool -> S2 -> Trunc2S2 = split
             true -> \(s : S2) -> inc s
             false -> mu2south
       in rem b
     joinr s -> mu2south
     join b s @ i -> \(s : S2) -> ? -- mu2merid x y @ i
